{"ast":null,"code":"import plkData from \"../../plk_data.json\";\nimport \"../style.scss\";\nimport LeafletMap from \"../components/LeafletMap.vue\";\nexport default {\n  name: \"PLKView\",\n  data() {\n    return {\n      plkData: plkData,\n      activeTab: \"standings\",\n      // Default active tab\n      plkMarkers: [] // PLK markers data\n    };\n  },\n  methods: {\n    showStandings() {\n      this.activeTab = \"standings\";\n    },\n    showResults() {\n      this.activeTab = \"results\";\n    },\n    showMap() {\n      this.activeTab = \"map\";\n      this.plkMarkers = this.extractPLKMarkers(); // Extract PLK markers data\n    },\n    extractPLKMarkers() {\n      // Extract PLK markers data from plkData and return as an array of objects\n      return this.plkData.map(row => {\n        return {\n          coords: [row.latitude, row.longitude],\n          icon: this.getPLKIcon(row.teamName) // Get PLK marker icon based on team name\n        };\n      });\n    },\n    getPLKIcon(teamName) {\n      // Logic to return appropriate PLK marker icon based on team name\n      // You need to implement this logic based on your iconsplk object\n      // For example:\n      // if (teamName === 'Twarde Pierniki') {\n      //   return iconsplk.TwardePierniki;\n      // }\n      // Add similar logic for other team names\n    }\n  },\n  components: {\n    LeafletMap // Register LeafletMap component\n  }\n};","map":{"version":3,"names":["plkData","LeafletMap","name","data","activeTab","plkMarkers","methods","showStandings","showResults","showMap","extractPLKMarkers","map","row","coords","latitude","longitude","icon","getPLKIcon","teamName","components"],"sources":["/home/shymoon/Desktop/WebDevProjects/basket-world/src/views/Plk.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Season 2023/2024</h1>\n    <label for=\"season\">Choose season:</label>\n    <select id=\"season\">\n      <option value=\"2023-2024\">2023/2024</option>\n    </select>\n\n    <!-- Menu -->\n    <div class=\"menu\">\n      <button @click=\"showStandings\">Standings</button>\n      <button @click=\"showResults\">Results</button>\n      <button @click=\"showMap\">Map</button>\n    </div>\n\n    <!-- Content Area -->\n    <div class=\"content\">\n      <table v-if=\"activeTab === 'standings'\">\n        <!-- Standings Table -->\n        <!-- Your standings table content here -->\n      </table>\n      <div v-else-if=\"activeTab === 'results'\">\n        <!-- Results Content -->\n        <p>Results content goes here.</p>\n      </div>\n      <div v-else-if=\"activeTab === 'map'\">\n        <!-- Map Component -->\n        <LeafletMap :plkMarkers=\"plkMarkers\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport plkData from \"../../plk_data.json\";\nimport \"../style.scss\";\nimport LeafletMap from \"../components/LeafletMap.vue\";\n\nexport default {\n  name: \"PLKView\",\n  data() {\n    return {\n      plkData: plkData,\n      activeTab: \"standings\", // Default active tab\n      plkMarkers: [], // PLK markers data\n    };\n  },\n  methods: {\n    showStandings() {\n      this.activeTab = \"standings\";\n    },\n    showResults() {\n      this.activeTab = \"results\";\n    },\n    showMap() {\n      this.activeTab = \"map\";\n      this.plkMarkers = this.extractPLKMarkers(); // Extract PLK markers data\n    },\n    extractPLKMarkers() {\n      // Extract PLK markers data from plkData and return as an array of objects\n      return this.plkData.map((row) => {\n        return {\n          coords: [row.latitude, row.longitude],\n          icon: this.getPLKIcon(row.teamName), // Get PLK marker icon based on team name\n        };\n      });\n    },\n    getPLKIcon(teamName) {\n      // Logic to return appropriate PLK marker icon based on team name\n      // You need to implement this logic based on your iconsplk object\n      // For example:\n      // if (teamName === 'Twarde Pierniki') {\n      //   return iconsplk.TwardePierniki;\n      // }\n      // Add similar logic for other team names\n    },\n  },\n  components: {\n    LeafletMap, // Register LeafletMap component\n  },\n};\n</script>\n\n<style scoped></style>\n"],"mappings":"AAkCA,OAAOA,OAAM,MAAO,qBAAqB;AACzC,OAAO,eAAe;AACtB,OAAOC,UAAS,MAAO,8BAA8B;AAErD,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLH,OAAO,EAAEA,OAAO;MAChBI,SAAS,EAAE,WAAW;MAAE;MACxBC,UAAU,EAAE,EAAE,CAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,aAAaA,CAAA,EAAG;MACd,IAAI,CAACH,SAAQ,GAAI,WAAW;IAC9B,CAAC;IACDI,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACJ,SAAQ,GAAI,SAAS;IAC5B,CAAC;IACDK,OAAOA,CAAA,EAAG;MACR,IAAI,CAACL,SAAQ,GAAI,KAAK;MACtB,IAAI,CAACC,UAAS,GAAI,IAAI,CAACK,iBAAiB,CAAC,CAAC,EAAE;IAC9C,CAAC;IACDA,iBAAiBA,CAAA,EAAG;MAClB;MACA,OAAO,IAAI,CAACV,OAAO,CAACW,GAAG,CAAEC,GAAG,IAAK;QAC/B,OAAO;UACLC,MAAM,EAAE,CAACD,GAAG,CAACE,QAAQ,EAAEF,GAAG,CAACG,SAAS,CAAC;UACrCC,IAAI,EAAE,IAAI,CAACC,UAAU,CAACL,GAAG,CAACM,QAAQ,CAAC,CAAE;QACvC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IACDD,UAAUA,CAACC,QAAQ,EAAE;MACnB;MACA;MACA;MACA;MACA;MACA;MACA;IAAA;EAEJ,CAAC;EACDC,UAAU,EAAE;IACVlB,UAAU,CAAE;EACd;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}